# Generated by precisionFDA exporter (v1.0.3) on 2018-06-14 01:16:24 +0000
# The asset download links in this file are valid only for 24h.

# Exported app: clamms_fit_models, revision: 11, authored by: evan.maxwell.2
# https://precision.fda.gov/apps/app-F0ZvBFj023K0VBK7Zv5vZkGv

# For more information please consult the app export section in the precisionFDA docs

# Start with Ubuntu 14.04 base image
FROM ubuntu:14.04

# Install default precisionFDA Ubuntu packages
RUN DEBIAN_FRONTEND=noninteractive apt-get update && apt-get install -y \
	aria2 \
	byobu \
	cmake \
	cpanminus \
	curl \
	dstat \
	g++ \
	git \
	htop \
	libboost-all-dev \
	libcurl4-openssl-dev \
	libncurses5-dev \
	make \
	perl \
	pypy \
	python-dev \
	python-pip \
	r-base \
	ruby1.9.3 \
	wget \
	xz-utils

# Install default precisionFDA python packages
RUN pip install \
	requests==2.5.0 \
	futures==2.2.0 \
	setuptools==10.2

# Add DNAnexus repo to apt-get
RUN /bin/bash -c "echo 'deb http://dnanexus-apt-prod.s3.amazonaws.com/ubuntu trusty/amd64/' > /etc/apt/sources.list.d/dnanexus.list"
RUN /bin/bash -c "echo 'deb http://dnanexus-apt-prod.s3.amazonaws.com/ubuntu trusty/all/' >> /etc/apt/sources.list.d/dnanexus.list"
RUN curl https://wiki.dnanexus.com/images/files/ubuntu-signing-key.gpg | apt-key add -

# Update apt-get
RUN DEBIAN_FRONTEND=noninteractive apt-get update

# Download app assets
RUN curl https://dl.dnanex.us/F/D/276f4K207JZb71fxx9vfy07gVFF74xKgXg3gQpXP/clamms_fitmodels_assets.tar.gz | tar xzf - -C / --no-same-owner --no-same-permissions

# Download helper executables
RUN curl https://dl.dnanex.us/F/D/0K8P4zZvjq9vQ6qV0b6QqY1z2zvfZ0QKQP4gjBXp/emit-1.0.tar.gz | tar xzf - -C /usr/bin/ --no-same-owner --no-same-permissions
RUN curl https://dl.dnanex.us/F/D/bByKQvv1F7BFP3xXPgYXZPZjkXj9V684VPz8gb7p/run-1.2.tar.gz | tar xzf - -C /usr/bin/ --no-same-owner --no-same-permissions

# Write app spec and code to root folder
RUN ["/bin/bash","-c","echo -E \\{\\\"spec\\\":\\{\\\"input_spec\\\":\\[\\{\\\"name\\\":\\\"reference_panel_normcov_beds_tarball\\\",\\\"class\\\":\\\"file\\\",\\\"optional\\\":false,\\\"label\\\":\\\"Tarball\\ of\\ reference\\ panel\\ normalized\\ coverage\\ BED\\ files\\\",\\\"help\\\":\\\"Archive\\ \\(.tar.gz\\)\\ of\\ all\\ normalized\\ coverage\\ BED\\ files\\ for\\ the\\ reference\\ panel\\ samples\\\"\\},\\{\\\"name\\\":\\\"reference_panel_config_file\\\",\\\"class\\\":\\\"file\\\",\\\"optional\\\":false,\\\"label\\\":\\\"TSV\\ config\\ file\\ for\\ building\\ the\\ reference\\ panel\\ model\\\",\\\"help\\\":\\\"Tab-separated\\ text\\ file\\ containing\\ list\\ of\\ reference\\ panel\\ samples\\ to\\ build\\ the\\ model\\ on\\ \\(column\\ 1,\\ BED\\ filenames\\)\\ and\\ their\\ sexes\\ \\(column\\ 2,\\ \\'M\\'\\ or\\ \\'F\\'\\)\\\"\\},\\{\\\"name\\\":\\\"clamms_windows_bed_file\\\",\\\"class\\\":\\\"file\\\",\\\"optional\\\":false,\\\"label\\\":\\\"CLAMMS\\ windows\\ BED\\ file\\ \\\",\\\"help\\\":\\\"BED\\ file\\ of\\ pre-computed\\ CLAMMS\\ windows\\\",\\\"default\\\":\\\"file-F0QK0k803q5pvvK5f0bG8ZFv\\\"\\}\\],\\\"output_spec\\\":\\[\\{\\\"name\\\":\\\"model_file\\\",\\\"class\\\":\\\"file\\\",\\\"optional\\\":false,\\\"label\\\":\\\"Fit\\ model\\ file\\\",\\\"help\\\":\\\"Fit\\ model\\ file\\ \\(BED\\ format\\)\\ based\\ on\\ input\\ reference\\ panel\\ samples\\\"\\}\\],\\\"internet_access\\\":false,\\\"instance_type\\\":\\\"baseline-2\\\"\\},\\\"assets\\\":\\[\\\"file-F0Qx1qj0V7BKV05GPQGPVPgG\\\"\\],\\\"packages\\\":\\[\\]\\} \u003e /spec.json"]
RUN ["/bin/bash","-c","echo -E \\{\\\"code\\\":\\\"tar\\ -xzf\\ \\\\\\\"\\$reference_panel_normcov_beds_tarball_path\\\\\\\"\\ -C\\ /work\\\\n\\\\nfit_models\\ \\\\\\\"\\$reference_panel_config_file_path\\\\\\\"\\ \\\\\\\"\\$clamms_windows_bed_file_path\\\\\\\"\\ \\\\u003e\\ \\\\\\\"\\$\\{reference_panel_normcov_beds_tarball_prefix\\}.model\\\\\\\"\\\\n\\\\nemit\\ model_file\\ \\\\\\\"\\$\\{reference_panel_normcov_beds_tarball_prefix\\}.model\\\\\\\"\\\"\\} | python -c 'import sys,json; print json.load(sys.stdin)[\"code\"]' \u003e /script.sh"]

# Create directory /work and set it to $HOME and CWD
RUN mkdir -p /work
ENV HOME="/work"
WORKDIR /work

# Set entry point to container
ENTRYPOINT ["/usr/bin/run"]

VOLUME /data
VOLUME /work